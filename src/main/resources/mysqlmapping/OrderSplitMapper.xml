<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tnpy.mes.mapper.mysql.OrderSplitMapper">
  <resultMap id="BaseResultMap" type="com.tnpy.mes.model.mysql.OrderSplit">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="orderID" jdbcType="VARCHAR" property="orderid" />
    <result column="orderSplitID" jdbcType="VARCHAR" property="ordersplitid" />
    <result column="materialID" jdbcType="VARCHAR" property="materialid" />
    <result column="productionNum" jdbcType="DOUBLE" property="productionnum" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, orderID, orderSplitID,materialID, productionNum, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_ordersplit
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tb_ordersplit
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.tnpy.mes.model.mysql.OrderSplit">
    insert into tb_ordersplit (id, orderID, orderSplitID, 
      productionNum, status,materialID)
    values (#{id,jdbcType=VARCHAR}, #{orderid,jdbcType=VARCHAR}, #{ordersplitid,jdbcType=VARCHAR}, 
      #{productionnum,jdbcType=DOUBLE}, #{status,jdbcType=INTEGER}, #{materialid,jdbcType=VARCHAR})
  </insert>
  <insert id="insertManyOrder" parameterType="java.util.List">
    delete from tb_ordersplit where orderID=#{orderID};
    insert into tb_ordersplit (id, orderID, orderSplitID,
    productionNum,status,materialID)
    values
    <foreach collection="orderSplitList" item="item" index="index" separator=",">
      ( #{item.id}, #{item.orderid}, #{item.ordersplitid}, #{item.productionnum}, #{item.status}, #{item.materialid})
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="com.tnpy.mes.model.mysql.OrderSplit">
    insert into tb_ordersplit
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderid != null">
        orderID,
      </if>
      <if test="ordersplitid != null">
        orderSplitID,
      </if>
      <if test="materialid != null">
        materialID,
      </if>
      <if test="productionnum != null">
        productionNum,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="orderid != null">
        #{orderid,jdbcType=VARCHAR},
      </if>
      <if test="ordersplitid != null">
        #{ordersplitid,jdbcType=VARCHAR},
      </if>
      <if test="materialid != null">
        #{materialid,jdbcType=VARCHAR},
      </if>
      <if test="productionnum != null">
        #{productionnum,jdbcType=DOUBLE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tnpy.mes.model.mysql.OrderSplit">
    update tb_ordersplit
    <set>
      <if test="orderid != null">
        orderID = #{orderid,jdbcType=VARCHAR},
      </if>
      <if test="ordersplitid != null">
        orderSplitID = #{ordersplitid,jdbcType=VARCHAR},
      </if>
      <if test="materialid != null">
        materialID = #{materialid,jdbcType=VARCHAR},
      </if>
      <if test="productionnum != null">
        productionNum = #{productionnum,jdbcType=DOUBLE},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tnpy.mes.model.mysql.OrderSplit">
    update tb_ordersplit
    set orderID = #{orderid,jdbcType=VARCHAR},
      orderSplitID = #{ordersplitid,jdbcType=VARCHAR},
       materialID = #{materialid,jdbcType=VARCHAR},
      productionNum = #{productionnum,jdbcType=DOUBLE},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>